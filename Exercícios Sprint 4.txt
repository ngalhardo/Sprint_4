E1
Você está recebendo um arquivo contendo 10.000 números inteiros, um em cada linha. Utilizando lambdas e high order functions, apresente os 5 maiores valores pares e a soma destes. Você deverá aplicar as seguintes funções no exercício:

map

filter

sorted

sum

Seu código deverá exibir na saída (simplesmente utilizando 2 comandos `print()`):
- a lista dos 5 maiores números pares em ordem decrescente;
- a soma destes valores.



with open("number.txt", "r") as file:
    numeros = [int(line.strip()) for line in file]

numeros_pares = filter(lambda x: x % 2 == 0, numeros)
cinco_maiores_pares = sorted(numeros_pares, reverse=True)[:5]
soma_cinco_maiores = sum(map(lambda x: x, cinco_maiores_pares))

print("5 maiores números pares:", cinco_maiores_pares)
print("Soma dos 5 maiores números pares:", soma_cinco_maiores)

-------------------------------------------------------------------------------

E2
Utilizando high order functions, implemente o corpo da função conta_vogais. O parâmetro de entrada será uma string e o resultado deverá ser a contagem de vogais presentes em seu conteúdo.

É obrigatório aplicar as seguintes funções:

len

filter

lambda

Desconsidere os caracteres acentuados. Eles não serão utilizados nos testes do seu código.



def conta_vogais(string):
    vogais = "aeiouAEIOU"  

    count = len(list(filter(lambda x: x in vogais, string)))

    return count

texto = "Teste da função"
print("Número de vogais:", conta_vogais(texto))

-------------------------------------------------------------------------------

E3
A função calcula_saldo recebe uma lista de tuplas, correspondendo a um conjunto de lançamentos bancários. Cada lançamento é composto pelo seu valor (sempre positivo) e pelo seu tipo (C - crédito ou D - débito). 

Abaixo apresentando uma possível entrada para a função.

lancamentos = [
    (200,'D'),
    (300,'C'),
    (100,'C')
]

A partir dos lançamentos, a função deve calcular o valor final, somando créditos e subtraindo débitos. Na lista anterior, por exemplo, teríamos como resultado final 200.

Além de utilizar lambdas, você deverá aplicar, obrigatoriamente, as seguintes funções na resolução:

reduce (módulo functools)

map



from functools import reduce

def calcula_saldo(lancamentos) -> float:
    # Função lambda para calcular o valor do lançamento com sinal de acordo com o tipo
    calcula_valor = lambda lancamento: lancamento[0] if lancamento[1] == 'C' else -lancamento[0]
    
    saldo_final = reduce(lambda acc, value: acc + value, map(calcula_valor, lancamentos), 0)
    
    return saldo_final

# Teste da função
lancamentos = [
    (200, 'D'),
    (300, 'C'),
    (100, 'C')
]

saldo = calcula_saldo(lancamentos)
print("Saldo final:", saldo)

-------------------------------------------------------------------------------

E4
A função calcular_valor_maximo deve receber dois parâmetros, chamados de operadores e operandos. Em operadores, espera-se uma lista de caracteres que representam as operações matemáticas suportadas (+, -, /, *, %), as quais devem ser aplicadas à lista de operadores nas respectivas posições. Após aplicar cada operação ao respectivo par de operandos, a função deverá retornar o maior valor dentre eles.

Veja o exemplo:

Entrada

operadores = ['+','-','*','/','+']
operandos  = [(3,6), (-7,4.9), (8,-8), (10,2), (8,4)]


Aplicar as operações aos pares de operandos

[ 3+6 , -7-4.9, 8*-8 , 10/2 , 8+4 ] 


Obter o maior dos valores

12


Na resolução da atividade você deverá aplicar as seguintes funções:

max

zip

map



def calcular_valor_maximo(operadores, operandos) -> float:
    # Função lambda para aplicar a operação matemática aos operandos
    aplicar_operacao = lambda operador, operando: eval(f"{operando[0]} {operador} {operando[1]}")
    
    resultados = map(aplicar_operacao, operadores, operandos)
    
    maior_valor = max(resultados)
    
    return maior_valor

# Teste da função
operadores = ['+', '-', '*', '/', '+']
operandos = [(3, 6), (-7, 4.9), (8, -8), (10, 2), (8, 4)]

maior_valor = calcular_valor_maximo(operadores, operandos)
print("Maior valor:", maior_valor)

-------------------------------------------------------------------------------

E5
Um determinado sistema escolar exporta a grade de notas dos estudantes em formato CSV. Cada linha do arquivo corresponde ao nome do estudante, acompanhado de 5 notas de avaliação, no intervalo [0-10]. É o arquivo estudantes.csv de seu exercício.
Precisamos processar seu conteúdo, de modo a gerar como saída um relatório em formato textual contendo as seguintes informações:


Nome do estudante

Três maiores notas, em ordem decrescente

Média das três maiores notas, com duas casas decimais de precisão

O resultado do processamento deve ser escrito na saída padrão (print), ordenado pelo nome do estudante e obedecendo ao formato descrito a seguir:

Nome: <nome estudante> Notas: [n1, n2, n3] Média: <média>

Exemplo:

Nome: Maria Luiza Correia Notas: [7, 5, 5] Média: 5.67

Nome: Maria Mendes Notas: [7, 3, 3] Média: 4.33

Em seu desenvolvimento você deverá utilizar lambdas e as seguintes funções:

round

map

sorted



with open("estudantes.csv", "r") as file:
    linhas = file.readlines()

processar_linha = lambda linha: linha.strip().split(',')
dados_estudantes = list(map(processar_linha, linhas[1:]))
calcular_media = lambda notas: round(sum(sorted(notas, reverse=True)[:3]) / 3, 2)
dados_ordenados = sorted(dados_estudantes, key=lambda x: x[0])

for nome, *notas in dados_ordenados:
    medias = calcular_media(list(map(float, notas)))
    print(f"Nome: {nome} Notas: {notas} Média: {medias}")

-------------------------------------------------------------------------------

E6
Você foi encarregado de desenvolver uma nova feature para um sistema de gestão de supermercados. O analista responsável descreveu o requisito funcional da seguinte forma:

- Para realizar um cálculo de custo, o sistema deverá permitir filtrar um determinado conjunto de produtos, de modo que apenas aqueles cujo valor unitário for superior à média deverão estar presentes no resultado. Vejamos o exemplo:

Conjunto de produtos (entrada):
Arroz: 4.99
Feijão: 3.49
Macarrão: 2.99
Leite: 3.29
Pão: 1.99

Produtos com valor acima da média:
Arroz: 4.99
Feijão: 3.49

Observe que estamos definindo a assinatura de uma função como parte de sua resposta. Você não pode mudá-la, apenas codificar seu corpo. O parâmetro conteudo é um dicionário cuja chave contém o nome do produto e o valor, o respectivo preço (ponto flutuante).

Observe um exemplo de valor para conteudo:

{
    "arroz": 4.99,
    "feijão": 3.49,
    "macarrão": 2.99,
    "leite": 3.29,
    "pão": 1.99
}
O retorno da função obrigatoriamente deve ser uma lista. Cada elemento da lista é uma tupla em que a primeira posição contém o nome do produto e a segunda, o respectivo preço. Veja um exemplo de retorno:

[
 
('feijão', 3.49),
 
 ('arroz', 4.99)
 
]

Importante: O retorno da função deve estar ordenado pelo preço do item (ordem crescente).



def maiores_que_media(conteudo: dict) -> list:
    media = sum(conteudo.values()) / len(conteudo) 
    produtos_acima_da_media = [(produto, preco) for produto, preco in conteudo.items() if preco > media]
    
    produtos_ordenados = sorted(produtos_acima_da_media, key=lambda x: x[1])
    
    return produtos_ordenados

# Teste da função
conteudo = {
    "arroz": 4.99,
    "feijão": 3.49,
    "macarrão": 2.99,
    "leite": 3.29,
    "pão": 1.99
}

resultado = maiores_que_media(conteudo)
print(resultado)

-------------------------------------------------------------------------------

